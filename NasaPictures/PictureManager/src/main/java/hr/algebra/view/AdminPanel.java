/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Article;
import hr.algebra.parsers.rss.ArticleParser;
import hr.algebra.utilities.MessageUtils;
import java.util.List;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;

/**
 *
 * @author trisek
 */
public class AdminPanel extends javax.swing.JPanel {
    
    private Repository repository;
    private String mergedNames;
    private DefaultListModel<String> sourceModel = new DefaultListModel<>();
    private final DefaultListModel<String> destinationModel = new DefaultListModel<>();
    /**
     * Creates new form AdminPanel
     */
    public AdminPanel() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnDeleteAll = new javax.swing.JButton();
        btnImportData = new javax.swing.JButton();
        spajdiImage = new javax.swing.JLabel();
        lbPromoteUserToAdmin = new javax.swing.JLabel();
        scUserToPromote = new javax.swing.JScrollPane();
        lsUserToPromote = new javax.swing.JList<>();
        btnPromote = new javax.swing.JButton();
        scAllUser = new javax.swing.JScrollPane();
        lsAllUsers = new javax.swing.JList<>();

        setBackground(new java.awt.Color(255, 255, 255));

        btnDeleteAll.setBackground(new java.awt.Color(250, 90, 90));
        btnDeleteAll.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        btnDeleteAll.setText("DELETE ALL");
        btnDeleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAllActionPerformed(evt);
            }
        });

        btnImportData.setBackground(new java.awt.Color(153, 255, 153));
        btnImportData.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        btnImportData.setText("Import data");
        btnImportData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportDataActionPerformed(evt);
            }
        });

        spajdiImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/spajdi.png"))); // NOI18N

        lbPromoteUserToAdmin.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        lbPromoteUserToAdmin.setText("Promote user to admin");

        scUserToPromote.setViewportView(lsUserToPromote);

        btnPromote.setBackground(new java.awt.Color(102, 255, 255));
        btnPromote.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        btnPromote.setText("Promote");
        btnPromote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPromoteActionPerformed(evt);
            }
        });

        scAllUser.setViewportView(lsAllUsers);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(scAllUser, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(scUserToPromote, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnImportData, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                    .addComponent(btnDeleteAll, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                    .addComponent(btnPromote, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(spajdiImage)
                .addGap(53, 53, 53))
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(lbPromoteUserToAdmin)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(lbPromoteUserToAdmin)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scUserToPromote, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                    .addComponent(scAllUser))
                .addGap(20, 20, 20)
                .addComponent(btnPromote, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(btnImportData, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(btnDeleteAll, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76))
            .addGroup(layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(spajdiImage)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAllActionPerformed
        try{
            if(MessageUtils.showConfirmDialog("Warning", "Are you sure you want to DELETE ALL articles?")){
                deleteAllPictures();
                repository.deleteAllArticles();
                MessageUtils.showInformationMessage("Info", "Deleted all the articles from database!");
            }
            } catch (Exception ex) {
                MessageUtils.showErrorMessage("Unrecoverable error", "Unable to upload articles");
                System.exit(1);
        }
    }//GEN-LAST:event_btnDeleteAllActionPerformed

    private void btnImportDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportDataActionPerformed
        try {
            List<Article> articles = ArticleParser.parse();
            repository.createArticles(articles);
            MessageUtils.showInformationMessage("Info", "Import successful!");
            
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Unrecoverable error", "Unable to upload articles");
            System.exit(1);
        }
    }//GEN-LAST:event_btnImportDataActionPerformed

    private void btnPromoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPromoteActionPerformed
            promoteUsersToAdmin();
    }//GEN-LAST:event_btnPromoteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteAll;
    private javax.swing.JButton btnImportData;
    private javax.swing.JButton btnPromote;
    private javax.swing.JLabel lbPromoteUserToAdmin;
    private javax.swing.JList<String> lsAllUsers;
    private javax.swing.JList<String> lsUserToPromote;
    private javax.swing.JScrollPane scAllUser;
    private javax.swing.JScrollPane scUserToPromote;
    private javax.swing.JLabel spajdiImage;
    // End of variables declaration//GEN-END:variables
    private void init() {
        try {
            repository = RepositoryFactory.getRepository();
            initLists();
            initDragNDrop();
        } catch (Exception ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }
    
    private void initLists() {
 
        try {
            sourceModel = repository.getAllUsers();
            lsAllUsers.setModel(sourceModel);
            
            lsUserToPromote.setModel(destinationModel);
        } catch (Exception e) {
        }
    }
    
    private void initDragNDrop() {
        lsAllUsers.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllUsers.setDragEnabled(true);
        lsAllUsers.setTransferHandler(new ExportTransferHandler());

        lsUserToPromote.setDropMode(DropMode.ON);
        lsUserToPromote.setTransferHandler(new ImportTransferHandler());
    }

    private class ExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            // defines icon shown in target before drop
            return COPY;
            //return MOVE;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new StringSelection(lsAllUsers.getSelectedValue());
        }
    }

    private class ImportTransferHandler extends TransferHandler {

        // we define whether we can import stringFlavor that we need for JList<String>
        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(DataFlavor.stringFlavor);
        }

        // we import the data
        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                String data = (String) transferable.getTransferData(DataFlavor.stringFlavor);

                if (!destinationModel.contains(data)) {
                    destinationModel.addElement(data);
                    lsUserToPromote.setModel(destinationModel);
                    // we remove the item from the source, in case of MOVE
                    ((DefaultListModel<String>)lsAllUsers.getModel()).remove(lsAllUsers.getSelectedIndex());
                    return true;
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }    
    private void promoteUsersToAdmin() {
        try {
            repository.promoteUsers(destinationModel);
            MessageUtils.showInformationMessage("INFO","Users successfully promoted!"); 
            initLists();
            destinationModel.removeAllElements();
        } catch (Exception e) {
            MessageUtils.showErrorMessage("ERROR","User promotion failed!"); 
        }
    }
    
    private void deleteAllPictures(){
        try {
            List<Article> articles = repository.selectArticles();
                for (int i = 0; i < articles.size(); i++) {
                    String picturePath = articles.get(i).getPicturePath();
                    if (picturePath != null) {
                        try {
                            Files.deleteIfExists(Paths.get(picturePath));
                        } catch (IOException iOException) {
                        }
                    }
                }            
            } catch (Exception e) {
            }
    }
}